package main

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestRing(t *testing.T) {
	r := NewRing()

	r.Place(1)
	assert.Equal(t, []int{0, 1,}, r.List())
	r.Place(2)
	assert.Equal(t, []int{0, 2, 1,}, r.List())
	r.Place(3)
	assert.Equal(t, []int{0, 2, 1, 3,}, r.List())
	r.Place(4)
	assert.Equal(t, []int{0, 4, 2, 1, 3,}, r.List())
	r.Place(5)
	assert.Equal(t, []int{0, 4, 2, 5, 1, 3,}, r.List())
	r.Place(6)
	assert.Equal(t, []int{0, 4, 2, 5, 1, 6, 3,}, r.List())
	r.Place(7)
	assert.Equal(t, []int{0, 4, 2, 5, 1, 6, 3, 7,}, r.List())
	r.Place(8)
	assert.Equal(t, []int{0, 8, 4, 2, 5, 1, 6, 3, 7,}, r.List())
	r.Place(9)
	assert.Equal(t, []int{0, 8, 4, 9, 2, 5, 1, 6, 3, 7,}, r.List())
	r.Place(10)
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 1, 6, 3, 7,}, r.List())
	r.Place(11)
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 6, 3, 7,}, r.List())
	r.Place(12)
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 3, 7,}, r.List())
	r.Place(13)
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 7,}, r.List())
	r.Place(14)
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7,}, r.List())
	r.Place(15)
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(16)
	assert.Equal(t, []int{0, 16, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(17)
	assert.Equal(t, []int{0, 16, 8, 17, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(18)
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(19)
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 19, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(20)
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(21)
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(22)
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Remove()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 19, 2, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(24)
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 19, 2, 24, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, r.List())
	r.Place(25)
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 19, 2, 24, 20, 25, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15}, r.List())
}

func TestPlay(t *testing.T) {
	game := NewGame(10, 1618)
	assert.Equal(t, 8317, game.Play())

	game = NewGame(13, 7999)
	assert.Equal(t, 146373, game.Play())

	game = NewGame(17, 1104)
	assert.Equal(t, 2764, game.Play())

	game = NewGame(21, 6111)
	assert.Equal(t, 54718, game.Play())

	game = NewGame(30, 5807)
	assert.Equal(t, 37305, game.Play())
}

func TestTakeTurn(t *testing.T) {
	game := NewGame(9, 25)

	game.TakeTurn()
	assert.Equal(t, []int{0, 1,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 2, 1,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 2, 1, 3,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 4, 2, 1, 3,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 4, 2, 5, 1, 3,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 4, 2, 5, 1, 6, 3,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 4, 2, 5, 1, 6, 3, 7,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 8, 4, 2, 5, 1, 6, 3, 7,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 8, 4, 9, 2, 5, 1, 6, 3, 7,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 1, 6, 3, 7,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 6, 3, 7,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 3, 7,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 7,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 19, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 19, 2, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 19, 2, 24, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15,}, game.ring.List())
	game.TakeTurn()
	assert.Equal(t, []int{0, 16, 8, 17, 4, 18, 19, 2, 24, 20, 25, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15}, game.ring.List())
}
